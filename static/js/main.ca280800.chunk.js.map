{"version":3,"sources":["reducers/todo.reducer.js","contexts/todos.context.js","hooks/useLocalStorageReducer.js","hooks/useToggleState.js","hooks/useInputState.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","serviceWorker.js","index.js","App.js"],"names":["reducer","state","action","type","id","uuid","task","completed","filter","todo","map","newTask","defaultTodos","TodosContext","createContext","DispatchContext","TodosProvider","props","key","defaultVal","useReducer","val","JSON","parse","window","localStorage","getItem","String","e","dispatch","useEffect","setItem","stringify","useLocalStorageReducer","todoReducer","todos","Provider","value","children","useToggle","initialVal","useState","setState","setValue","target","EditTodoForm","toggleEditForm","useContext","useInputState","handleChange","onSubmit","preventDefault","style","marginLeft","width","TextField","autoFocus","margin","onChange","fullWidth","memo","useToggleState","isEditing","toggle","ListItem","height","Checkbox","tabIndex","checked","onClick","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","length","Paper","List","i","Fragment","Divider","TodoForm","reset","padding","label","TodoApp","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca280800.chunk.js","sourcesContent":["import uuid from \"uuid/v4\";\r\nconst reducer = (state, action) => {\r\n  switch(action.type){\r\n    case \"ADD\":\r\n      return [...state, { id: uuid(), task: action.task, completed: false }];\r\n    case \"REMOVE\":\r\n      return state.filter(todo => todo.id !== action.id);\r\n    case \"TOGGLE\":\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n    case \"EDIT\":\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, task: action.newTask } : todo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default reducer;\r\n","import React, { createContext } from \"react\";\r\nimport {useLocalStorageReducer} from '../hooks/useLocalStorageReducer';\r\nimport todoReducer from \"../reducers/todo.reducer\";\r\nconst defaultTodos = [\r\n  { id: 1, task: \"Mow the lawn using goats\", completed: false },\r\n  { id: 2, task: \"Release lady bugs into garden\", completed: true }\r\n];\r\nexport const TodosContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nexport function TodosProvider(props) {\r\n  const [todos, dispatch] = useLocalStorageReducer(\"todos\", defaultTodos, todoReducer)\r\n  return (\r\n    <TodosContext.Provider value={todos}>\r\n      <DispatchContext.Provider value={dispatch}>\r\n        {props.children}\r\n      </DispatchContext.Provider>\r\n    </TodosContext.Provider>\r\n  );\r\n}\r\n","import { useReducer, useEffect } from \"react\";\r\n\r\nfunction useLocalStorageReducer(key, defaultVal, reducer) {\r\n  // make piece of state, based off of value in localStorage (or default)\r\n  const [state, dispatch] = useReducer(reducer, defaultVal, () => {\r\n    let val;\r\n    try {\r\n      val = JSON.parse(window.localStorage.getItem(key) || String(defaultVal));\r\n    } catch (e) {\r\n      val = defaultVal;\r\n    }\r\n    return val;\r\n  });\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n  return [state, dispatch];\r\n}\r\nexport { useLocalStorageReducer };\r\n","import {useState} from 'react';\r\nfunction useToggle(initialVal = false) {\r\n  const [state, setState] = useState(initialVal);\r\n  const toggle = () => {\r\n    setState(!state);\r\n  };\r\n  return [state, toggle];\r\n}\r\nexport default useToggle;","import  {useState} from 'react';\r\nexport default initialVal => {\r\n  const [value, setValue] = useState(initialVal);\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n  const reset = () => {\r\n    setValue(\"\")\r\n  }\r\n  return [value, handleChange, reset];\r\n}","import React, { useContext } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./hooks/useInputState\";\r\nimport { DispatchContext } from \"./contexts/todos.context\";\r\n\r\nfunction EditTodoForm({ id, toggleEditForm, task }) {\r\n  const dispatch = useContext(DispatchContext);\r\n  const [value, handleChange] = useInputState(task);\r\n  return (\r\n    <form\r\n      onSubmit={e => {\r\n        e.preventDefault();\r\n        dispatch({ type: \"EDIT\", id: id, newTask: value });\r\n        toggleEditForm();\r\n      }}\r\n      style={{ marginLeft: \"1rem\", width: \"100%\" }}\r\n    >\r\n      <TextField\r\n        autoFocus\r\n        margin=\"normal\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        fullWidth\r\n      />\r\n    </form>\r\n  );\r\n}\r\nexport default EditTodoForm;\r\n","import React, { useContext, memo } from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\nimport EditTodoForm from \"./EditTodoForm\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItem\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport { DispatchContext } from \"./contexts/todos.context\";\r\n\r\nfunction Todo({ id, task, completed }) {\r\n  const dispatch = useContext(DispatchContext);\r\n  const [isEditing, toggle] = useToggleState(false);\r\n  return (\r\n    <ListItem style={{ height: \"64px\" }}>\r\n      {isEditing ? (\r\n        <EditTodoForm task={task} toggleEditForm={toggle} id={id} />\r\n      ) : (\r\n        <>\r\n          <Checkbox\r\n            tabIndex={-1}\r\n            checked={completed}\r\n            onClick={() => dispatch({ type: \"TOGGLE\", id })}\r\n          />\r\n          <ListItemText\r\n            style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\r\n          >\r\n            {task}\r\n          </ListItemText>\r\n          <ListItemSecondaryAction>\r\n            <IconButton\r\n              aria-label=\"Delete\"\r\n              onClick={() => dispatch({ type: \"REMOVE\", id })}\r\n            >\r\n              <DeleteIcon />\r\n            </IconButton>\r\n            <IconButton aria-label=\"Edit\" onClick={toggle}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </>\r\n      )}\r\n    </ListItem>\r\n  );\r\n}\r\nexport default memo(Todo);\r\n","import React, { useContext } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { TodosContext } from \"./contexts/todos.context\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList() {\r\n  const todos = useContext(TodosContext);\r\n  if (todos.length)\r\n    return (\r\n      <Paper>\r\n        <List>\r\n          {todos.map((todo, i) => (\r\n            <React.Fragment key={i}>\r\n              <Todo {...todo} key={todo.id} />\r\n              {i < todos.length - 1 && <Divider />}\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    );\r\n  return null;\r\n}\r\nexport default TodoList;\r\n","import React, { useContext } from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport useInputState from \"./hooks/useInputState\";\r\nimport { DispatchContext } from \"./contexts/todos.context\";\r\n\r\nfunction TodoForm() {\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n  const dispatch = useContext(DispatchContext);\r\n  return (\r\n    <Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          dispatch({type: \"ADD\", task: value})\r\n          reset();\r\n        }}\r\n      >\r\n        <TextField\r\n          value={value}\r\n          onChange={handleChange}\r\n          margin=\"normal\"\r\n          label=\"Add New Todo\"\r\n          fullWidth\r\n        />\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport { TodosProvider } from \"./contexts/todos.context\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\n\r\nfunction TodoApp() {\r\n  return (\r\n    <Paper\r\n      style={{\r\n        padding: 0,\r\n        margin: 0,\r\n        height: \"100vh\",\r\n        backgroundColor: \"#fafafa\"\r\n      }}\r\n      elevation={0}\r\n    >\r\n      <AppBar color=\"primary\" position=\"static\" style={{ height: \"64px\" }}>\r\n        <Toolbar>\r\n          <Typography color=\"inherit\">TODOS WITH HOOKS</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container justify=\"center\" style={{ marginTop: \"1rem\" }}>\r\n        <Grid item xs={11} md={8} lg={4}>\r\n          <TodosProvider>\r\n            <TodoForm />\r\n            <TodoList />\r\n          </TodosProvider>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\nexport default TodoApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport TodoApp from \"./TodoApp\";\n\nexport default function App() {\n  return <TodoApp />;\n}\n"],"sourceRoot":""}